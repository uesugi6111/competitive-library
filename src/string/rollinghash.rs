//! ロリハ
//const BASE: Wrapping<u128> = Wrapping(2_305_843_009_213_693_951); // 2^61-1
use std::num::Wrapping;
type MOD = u128;
const BASE: Wrapping<MOD> = Wrapping(1_000_000_007);

///  text 内での pattern の出現位置の始点を返す
pub fn rolling_hash<T: Into<MOD> + Copy>(pattern: &[T], text: &[T]) -> Vec<usize> {
    let rh = RollingHash::new(text, pattern.len());
    rh.search(pattern)
}

pub struct RollingHash {
    pub text_hash: Vec<Wrapping<MOD>>,
    length: usize,
}
impl RollingHash {
    pub fn new<T: Into<MOD> + Copy>(text: &[T], length: usize) -> Self {
        let pow_base = Wrapping(BASE.0.wrapping_pow(length as u32));

        let mut hash = Wrapping(0);

        for &t in text.iter().take(length) {
            hash *= BASE;
            hash += Wrapping(t.into());
        }
        let mut text_hash = vec![hash];

        for k in 0..text.len() - length {
            hash *= BASE;
            hash += Wrapping(text[length + k].into());
            hash -= Wrapping(text[k].into()) * pow_base;
            text_hash.push(hash);
        }
        Self { text_hash, length }
    }
    pub fn search<T: Into<MOD> + Copy>(&self, pattern: &[T]) -> Vec<usize> {
        assert_eq!(self.length, pattern.len());

        let mut pattern_hash = Wrapping(0);

        for &p in pattern {
            pattern_hash *= BASE;
            pattern_hash += Wrapping(p.into());
        }

        self.text_hash
            .iter()
            .enumerate()
            .filter_map(|(i, &h)| if pattern_hash == h { Some(i) } else { None })
            .collect()
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_rolling_hash() {
        let mut mached = false;
        let s = b"hhggggghhhhhgghhhhhghgggggghggggghgghhggghhggghhhhhgggghhggggghhghghghhhhhhhgggghhhgghgggghhhggghhhgghhghhhghhghhhhhghghhghghggghhhhhghhgghghghhhhhghhhhgghhhhhghghgggggghhgghgghhghhgghghghghhghhhhhggggghggggghggggghhhhgggggghghgghhhhhhggghhhggghhghghhghhhhhhghghghhhghhhhgghhghghghgggghhghhhhgghhghghgghggghgghggggghggghhggghggghghhhgghhgggghhghhhhhghgghhhhghghhggghggghggghhhghhhgggghhhhghggghggghhggggghhghhhhhhhhggghgghhghhhhhgghhhhghhgghgghghgghghgghhgghggghghgghgghghggghghhghghhhhghhhhgghhghghhhhhghghhghghghgghhhghgghhhhhgggghhhhghghghgghhhghhhhhhhhhhhhghghghgghhhggghhhgghhhgghgghghggghhhgghhgggghhggghhghhghhhhghgghhgggghhghghhgghggggghgggghhghghhgghggggggggghhggghhhhghhhhghhggggggghhhhghhgghhhggghhghhghgghhhgghhhghgghhhhhhgghhhhgggghgghhhhhghghhhhgghhggghggghhgggghghhgghghhhgghhhhghghghggghhgggghhhhgghghhhhhhhhgghhhhgggghhgghhhghggghhghghggghhhghghhghgghggghhghhghgghghghhhgggggghghggghhhhgghhhhghghhgggghghhghgghghhhgghghhhhhghghghhgghhhhghhhgghghggggghghhhgghhhhghghhgghhghhhgghgghhhghghhgghggghhghghhgghgggghghhhhghhggghhhhhhggghgghhhghggggghhgggghhghhgghhgghhhhhghhhhhhgghhghhhhhghghghghghhggggggghghgghggghhhhhgghghhhghgghgghhhghghhhhggggghhghghghhgghghgghhgggggggghhhhhghghhhghghhhhhgghhgghhghgghghggghhgghghghhghghhghhhhghhhgggghghhghhhghhhhghhgghggghghghhghghhhggghhhgggghhggghhghgggghhhghghhhghhhhhhhghhgggghhhhgghggghhgghhhhgggghgggghhhhghhhggghhhgggggghggghgghghhhghggghghgghgggghhghhhghhgghghhhhghhgghhgghhhhhggghggghhghhghhgggghghgggghgghggghhhhhhghhghgghghhhhhghghhhggghgghghghgggghghhgghhhgghhgggggghggghhggghhhghhghghggghhggghghhhhhgghhgghhhhggghhhhgggghhhgghhggghghhghghghghhgghghggghgghgghghhgghhhghgghghhggghghhghhhhgghhghghhhghghhghghghhgghhhgghghhghggggghhhhhggggggggghhhhgghhhgghhghghggghghghhgggghghghhhgghgghhghhgghggggggghggghggghghgggghghhggghgghhhhhhgghhghggghgghhhhghhghghhhggggghhghhgghhgghhgghggghggghhhhhgghgggggghghhhhhghhhghhhghghghhhhhghggghhgghhhhhgggghhghhhhhghhgghhhgghgggghghgghggghhhhhhhhggghghghhhghhghhgghhghghhhgghghgghhhhggghhhggghhgghghgghhhhhggghhghghghghhgghghghhghghghhgggggghghhhghhhhhggghgghghhgghghhhhghhhhgghhghghhggggghghghghghhghgghggghhghhggghggghhggghhgghghhghggghgggghgghhhghgghgghhhghghghhghhhggghhhhgghhhhgghhhghghhghggggggghhhhghghhhgghhggghhghgghgghhhghhhghggghhggghghhgghhhghgghhhghhgghghhhghgghggghgghhghhggghhghhhhghgghgghggggghgghhhhhhghhgggggggghggggghgggggggghghhhhghhghggghgggghghghhghgghhgghhgghghhhghhghhghhgghgghhhgghghhhhgghghgghhgggghggggggghghghhghgggghghhgggghgghghhhhhgghhghgghghhggghghhghhghgghhggghhhhgghhhhhgggggghhggghhghhggghgghhghhhghhhhhgghhghgggggghgghggghhghgghghhgggggghgghhhghhhhghgghhhhhhghghhgghgghhgghhgghhhhhggggghhghhgghhghgghghghhhghgghggghghghgggghgghhggghghgghghhhhhhgggggghghghhhghhghhhgghghghgghhhghhggghggggggggghhhgghghhhhhhghgghgghgghghgghhhhhhgggghghhhhgggghgggggghhhghghghgghhghghhhhghgghhhhhgggggggggghghghggggggghgghhgghghhghhhhggghhghgggghghhghgghgghggghhhgghhhghgghhhhhghggghhhhghhghhhhghhggggghhhhhhhhghhhghghhggghhhhgggggghghhhgggghghhhgghhggghhghhghhgghggggggghhhgghgghghhhghgghhhghhhhhgghgghhhhgghhhhhhghhggghhhgghggggghghghghgghghgghhhhhhhhhhgghhhgghgghghhghhghgghgghggghghggghhhgghgghhhghghgghghghhhgghhggghhggggggghgghghhghghghhhhghhgghhhgghghhhghhghhhhhghhhgghgghhhghhhhghhhghghgghhghhgggggghgghghghhhghgghhhhhhhhhghghhhhhggggghgggghhhghgghhhghhhghhgghghhghggghggghhghgghhhghghhhhhggghhhghghhhgghhhhgghgggghhhghgghhggghhhggggghghhhgggghghgghhggghgg";

        for i in 0..s.len() {
            if i + 21 * 2 > s.len() {
                break;
            }
            if !rolling_hash(&s[i..i + 21], s).is_empty() {
                mached = true;
                break;
            }
        }
        assert!(mached);
    }
    #[test]
    fn kill_mod_u64() {
        let s = b

        assert!(rolling_hash(
            b
            s
        ).is_empty());
    }

    #[test]
    fn abc() {
        let s = b"abcdefghijklmnopqrstuvwxyz";
        assert_eq!(rolling_hash(s, s), vec![0]);

        for i in 1..26 {
            for j in 0..26 - i {
                assert_eq!(rolling_hash(&s[j..j + i], s), vec![j], "{} {}", i, j);
            }
        }
    }
}

mod monoid {

    use super::*;
    use crate::structure::segment_tree::Monoid;
    struct RollingHashMonoid {}
    impl Monoid for RollingHashMonoid {
        type T = (Wrapping<MOD>, Wrapping<MOD>);

        fn identity_element() -> Self::T {
            (Wrapping(0), Wrapping(1))
        }

        fn binary_operation(a: &Self::T, b: &Self::T) -> Self::T {
            (a.0 * b.1 + b.0, a.1 * b.1)
        }
    }

    #[cfg(test)]
    mod tests {
        use crate::structure::segment_tree::SegmentTree;

        use super::*;
        #[test]
        fn m() {
            let mut sg = SegmentTree::<RollingHashMonoid>::new(29);

            for (i, &value) in b"abcdefghijklmnopqrstuvwxyzabc".iter().enumerate() {
                sg.set(i, (Wrapping(value as u128), BASE));
            }

            assert_eq!(sg.query(0, 3), sg.query(26, 29));
            sg.set(3, (Wrapping(b'a' as u128), BASE));
            sg.set(4, (Wrapping(b'b' as u128), BASE));
            sg.set(5, (Wrapping(b'c' as u128), BASE));
            assert_eq!(sg.query(0, 3), sg.query(3, 6));

            let rh = RollingHash::new(b"abcdefghijklmnopqrstuvwxyzabc", 3);
            assert_eq!(sg.query(0, 3).0, rh.text_hash[0]);
        }
    }
}
