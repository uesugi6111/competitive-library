var searchIndex = JSON.parse('{\
"competitive_library":{"doc":"uesugi …","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,11,11,11,11,11,11,11,11,12,12,11,11,11,3,11,11,11,11,11,11,11,11,11,11,5,5,5,5,0,0,0,0,3,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,5,5,5,0,0,0,5,5,5,5,0,0,5,5,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,3,3,8,3,16,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11],"n":["algorithm","graph","math","string","structure","atkin","convex_hull_trick","cumsum","enum_divisors","eratosthenes","fast_eratosthenes","inversion_number","largest_rectangle","prime","run_length","sieve_of_atkin","ConvexHullTrick","LinearFunction","add_line","borrow","borrow","borrow_mut","borrow_mut","default","from","from","from","into","into","new","query","try_from","try_from","try_into","try_into","type_id","type_id","cumsum","enum_divisors","LinearSieve","borrow","borrow_mut","divisors","factorize","from","into","is_prime","new","primes","table","try_from","try_into","type_id","Eratosthenes","borrow","borrow_mut","count","from","into","new","primes","try_from","try_into","type_id","inversion_number","largest_rectangle","trial_division","compress","dijkstra","dijkstra_restorepath","floyd_warshall","util","Node","borrow","borrow_mut","clone","clone_into","cmp","dijkstra","eq","fmt","from","into","new","partial_cmp","to_owned","try_from","try_into","type_id","Node","borrow","borrow_mut","clone","clone_into","cmp","dijkstra","eq","fmt","from","into","new","partial_cmp","to_owned","try_from","try_into","type_id","floyd_warshall","adjacency_list","to_adjacency_matrix","euclid","mod_pow","permutation","gcd","lcm","modpow","make_permutation","rollinghash","z_algorithm","rolling_hash","z_algorithm","binary_trie","cumsum_2d","dsu","fenwick_tree","segment_tree","sparse_table","BinaryTrie","borrow","borrow_mut","clone","clone_into","count","default","eq","erase","erase_all","fmt","from","insert","into","max","min","ne","new","to_owned","try_from","try_into","type_id","xor_min","CumSum2D","borrow","borrow_mut","clone","clone_into","fmt","from","into","new","query","to_owned","try_from","try_into","type_id","Dsu","borrow","borrow_mut","clone","clone_into","fmt","from","get_all_groups","get_same_group","into","is_same","new","root","size","to_owned","try_from","try_into","type_id","unite","FenwickTree","Sum","add","borrow","borrow_mut","clone","clone_into","fmt","from","into","new","sum","sum","sum","to_owned","try_from","try_into","type_id","Max","Min","Monoid","SegmentTree","T","binary_operation","binary_operation","binary_operation","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","get","identity_element","identity_element","identity_element","into","into","into","max_right","min_left","new","query","set","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","SparseTable","borrow","borrow_mut","from","into","new","query","try_from","try_into","type_id"],"q":["competitive_library","","","","","competitive_library::algorithm","","","","","","","","","","competitive_library::algorithm::atkin","competitive_library::algorithm::convex_hull_trick","","","","","","","","","","","","","","","","","","","","","competitive_library::algorithm::cumsum","competitive_library::algorithm::enum_divisors","competitive_library::algorithm::eratosthenes","","","","","","","","","","","","","","competitive_library::algorithm::fast_eratosthenes","","","","","","","","","","","competitive_library::algorithm::inversion_number","competitive_library::algorithm::largest_rectangle","competitive_library::algorithm::prime","competitive_library::algorithm::run_length","competitive_library::graph","","","","competitive_library::graph::dijkstra","","","","","","","","","","","","","","","","","competitive_library::graph::dijkstra_restorepath","","","","","","","","","","","","","","","","","competitive_library::graph::floyd_warshall","competitive_library::graph::util","","competitive_library::math","","","competitive_library::math::euclid","","competitive_library::math::mod_pow","competitive_library::math::permutation","competitive_library::string","","competitive_library::string::rollinghash","competitive_library::string::z_algorithm","competitive_library::structure","","","","","","competitive_library::structure::binary_trie","","","","","","","","","","","","","","","","","","","","","","","competitive_library::structure::cumsum_2d","","","","","","","","","","","","","","competitive_library::structure::dsu","","","","","","","","","","","","","","","","","","","competitive_library::structure::fenwick_tree","","","","","","","","","","","","","","","","","","competitive_library::structure::segment_tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive_library::structure::sparse_table","","","","","","","","",""],"d":["アルゴリズムっぽいものが置いてあります","グラフに関係しそうなもの","数学っぽいもの","文字列に関係しそうなもの","データ構造っぽいもの","アトキンの篩","","累積和","約数列挙","エラトステネス","エラトステネス","転倒数","最大長方形","試割","ランレングス","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","エラトステネスの篩","","","素数の個数をカウント","","","初期化 素数フラグを処理","フラグから素数配列を生成","","","","","","","","ダイクストラ","ダイクストラ","ワーシャルフロイト","隣接行列 ←→ 隣接リスト","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ユークリッドさんありがとう","累乗剰余","順列生成","","","","","ロリハ","Z algorithm","","","BinaryTire","二次元累積和","Union find","BIT","セグメントツリー","SparseTable","","","","","","値のカウント","","","値の削除","値をすべて削除","","","値の挿入","","最大値を求める","最小値を求める","","構築","","","","","xor 後の最小値を求める","","","","","","","","","","","","","","","UnionFind","","","","","","","","","","","","","","","","","","","binaryIndexTree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,1,2,1,1,2,1,1,1,2,1,2,1,2,1,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,0,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,5,5,5,5,5,0,5,5,5,5,5,5,5,5,5,5,0,6,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,8,8,8,8,8,8,8,8,8,8,8,8,8,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,0,0,0,0,12,12,13,14,13,14,15,13,14,15,13,14,15,15,15,12,13,14,13,14,15,15,15,15,15,15,13,14,15,13,14,15,13,14,15,0,16,16,16,16,16,16,16,16,16],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u64",15]],[["vec",3],["bool",15]]],null,null,[[["i64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i64",15]],["i64",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],[["vec",3],["i64",15]]],[[["i64",15]],[["vec",3],["i64",15]]],null,[[]],[[]],[[["i64",15]],[["vec",3],["i64",15]]],[[["i64",15]],[["i64",15],["btreemap",3]]],[[]],[[]],[[["i64",15]],["bool",15]],[[["usize",15]]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[],["usize",15]],[[]],[[]],[[["usize",15]]],[[],[["vec",3],["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["i64",15]],[[],["i64",15]],[[["i64",15]],[["hashmap",3],["i64",15]]],[[["str",15]],["vec",3]],null,null,null,null,null,[[]],[[]],[[],["node",3]],[[]],[[],["ordering",4]],[[["usize",15]],[["i64",15],["option",4]]],[[["node",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["usize",15],["i64",15]]],[[["node",3]],[["ordering",4],["option",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[],["node",3]],[[]],[[],["ordering",4]],[[["usize",15]],["option",4]],[[["node",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["option",4],["usize",15],["i64",15]]],[[["node",3]],[["ordering",4],["option",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],[["vec",3],["vec",3]]],[[],[["vec",3],["vec",3]]],[[],[["vec",3],["vec",3]]],null,null,null,[[["i64",15]],["i64",15]],[[["i64",15]],["i64",15]],[[["i64",15]],["i64",15]],[[["usize",15]],[["vec",3],["vec",3]]],null,null,[[],["bool",15]],[[],[["vec",3],["usize",15]]],null,null,null,null,null,null,null,[[]],[[]],[[],["binarytrie",3]],[[]],[[["u32",15]],[["u32",15],["option",4]]],[[],["binarytrie",3]],[[["binarytrie",3]],["bool",15]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["formatter",3]],["result",6]],[[]],[[["u32",15]],["option",4]],[[]],[[],[["u32",15],["option",4]]],[[],[["u32",15],["option",4]]],[[["binarytrie",3]],["bool",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["u32",15]],[["u32",15],["option",4]]],null,[[]],[[]],[[],["cumsum2d",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["usize",15]],["i64",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[],["dsu",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[],[["hashset",3],["hashmap",3],["usize",15]]],[[["usize",15]],[["hashset",3],["usize",15]]],[[]],[[["usize",15]],["bool",15]],[[["usize",15]],["dsu",3]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15]],["bool",15]],null,null,[[["usize",15]]],[[]],[[]],[[],["fenwicktree",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["usize",15]],["fenwicktree",3]],[[]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["segmenttree",3]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["i64",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"ConvexHullTrick"],[3,"LinearFunction"],[3,"LinearSieve"],[3,"Eratosthenes"],[3,"Node"],[3,"Node"],[3,"BinaryTrie"],[3,"CumSum2D"],[3,"Dsu"],[3,"FenwickTree"],[8,"Sum"],[8,"Monoid"],[3,"Min"],[3,"Max"],[3,"SegmentTree"],[3,"SparseTable"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};