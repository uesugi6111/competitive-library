var searchIndex={};
searchIndex["competitive_library"] = {"doc":"uesugi が競技プログラミングで使用する(した)ライブラリ群です…","i":[[0,"algorithm","competitive_library","アルゴリズムっぽいものが置いてあります",null,null],[0,"atkin","competitive_library::algorithm","アトキンの篩",null,null],[5,"sieve_of_atkin","competitive_library::algorithm::atkin","",null,[[["u64"]],[["vec",["bool"]],["bool"]]]],[0,"convex_hull_trick","competitive_library::algorithm","",null,null],[3,"LinearFunction","competitive_library::algorithm::convex_hull_trick","",null,null],[3,"ConvexHullTrick","","",null,null],[11,"new","","",0,[[],["self"]]],[11,"from","","",0,[[],["self"]]],[11,"add_line","","",0,[[["i64"],["self"]]]],[11,"query","","",0,[[["i64"],["self"]],["i64"]]],[0,"cumsum","competitive_library::algorithm","累積和",null,null],[5,"cumsum","competitive_library::algorithm::cumsum","",null,[[],[["i64"],["vec",["i64"]]]]],[0,"enum_divisors","competitive_library::algorithm","約数列挙",null,null],[5,"enum_divisors","competitive_library::algorithm::enum_divisors","",null,[[["i64"]],[["i64"],["vec",["i64"]]]]],[0,"eratosthenes","competitive_library::algorithm","エラトステネス",null,null],[3,"LinearSieve","competitive_library::algorithm::eratosthenes","",null,null],[12,"table","","",1,null],[12,"primes","","",1,null],[11,"new","","",1,[[["usize"]],["self"]]],[11,"factorize","","",1,[[["i64"],["self"]],[["btreemap",["i64","i64"]],["i64"]]]],[11,"divisors","","",1,[[["i64"],["self"]],[["i64"],["vec",["i64"]]]]],[11,"is_prime","","",1,[[["i64"],["self"]],["bool"]]],[0,"fast_eratosthenes","competitive_library::algorithm","エラトステネス",null,null],[3,"Eratosthenes","competitive_library::algorithm::fast_eratosthenes","エラトステネスの篩",null,null],[11,"new","","初期化 素数フラグを処理 - param n:usize 探索上限",2,[[["usize"]],["self"]]],[11,"count","","素数の個数をカウント",2,[[["self"]],["usize"]]],[11,"primes","","フラグから素数配列を生成",2,[[["self"]],[["usize"],["vec",["usize"]]]]],[0,"inversion_number","competitive_library::algorithm","転倒数",null,null],[5,"inversion_number","competitive_library::algorithm::inversion_number","",null,[[],["i64"]]],[0,"largest_rectangle","competitive_library::algorithm","最大長方形",null,null],[5,"largest_rectangle","competitive_library::algorithm::largest_rectangle","",null,[[],["i64"]]],[0,"prime","competitive_library::algorithm","試割",null,null],[5,"trial_division","competitive_library::algorithm::prime","",null,[[["i64"]],[["hashmap",["i64","i64"]],["i64"]]]],[0,"run_length","competitive_library::algorithm","ランレングス",null,null],[5,"compress","competitive_library::algorithm::run_length","",null,[[["str"]],["vec"]]],[0,"graph","competitive_library","グラフに関係しそうなもの",null,null],[0,"dijkstra","competitive_library::graph","ダイクストラ",null,null],[3,"Node","competitive_library::graph::dijkstra","",null,null],[5,"dijkstra","","",null,[[["usize"]],[["option",["i64"]],["i64"]]]],[11,"new","","",3,[[["i64"],["usize"]],["self"]]],[0,"dijkstra_restorepath","competitive_library::graph","ダイクストラ",null,null],[3,"Node","competitive_library::graph::dijkstra_restorepath","",null,null],[5,"dijkstra","","",null,[[["usize"]],["option"]]],[11,"new","","",4,[[["i64"],["option",["usize"]],["usize"]],["self"]]],[0,"floyd_warshall","competitive_library::graph","ワーシャルフロイト",null,null],[5,"floyd_warshall","competitive_library::graph::floyd_warshall","",null,[[],[["vec",["option"]],["vec",["vec"]]]]],[0,"util","competitive_library::graph","隣接行列 ←→ 隣接リスト",null,null],[5,"to_adjacency_matrix","competitive_library::graph::util","",null,[[],[["vec",["option"]],["vec",["vec"]]]]],[5,"adjacency_list","","",null,[[],[["vec",["vec"]],["vec",["i64"]]]]],[0,"math","competitive_library","数学っぽいもの",null,null],[0,"euclid","competitive_library::math","ユークリッドさんありがとう",null,null],[5,"gcd","competitive_library::math::euclid","",null,[[["i64"]],["i64"]]],[5,"lcm","","",null,[[["i64"]],["i64"]]],[0,"mod_pow","competitive_library::math","累乗剰余",null,null],[5,"modpow","competitive_library::math::mod_pow","",null,[[["i64"]],["i64"]]],[0,"permutation","competitive_library::math","順列生成",null,null],[5,"make_permutation","competitive_library::math::permutation","",null,[[["usize"]],[["vec",["vec"]],["vec",["usize"]]]]],[0,"string","competitive_library","文字列に関係しそうなもの",null,null],[0,"rollinghash","competitive_library::string","ロリハ",null,null],[5,"rolling_hash","competitive_library::string::rollinghash","",null,[[],["bool"]]],[0,"z_algorithm","competitive_library::string","Z algorithm",null,null],[5,"z_algorithm","competitive_library::string::z_algorithm","",null,[[],[["usize"],["vec",["usize"]]]]],[0,"structure","competitive_library","データ構造っぽいもの",null,null],[0,"binary_trie","competitive_library::structure","BinaryTire",null,null],[3,"BinaryTrie","competitive_library::structure::binary_trie","",null,null],[11,"new","","構築",5,[[],["self"]]],[11,"insert","","値の挿入",5,[[["self"],["u32"]],["option"]]],[11,"count","","値のカウント",5,[[["u32"],["self"]],[["option",["u32"]],["u32"]]]],[11,"erase","","値の削除",5,[[["self"],["u32"]],["option"]]],[11,"erase_all","","値をすべて削除",5,[[["self"],["u32"]],["option"]]],[11,"xor_min","","xor 後の最小値を求める",5,[[["u32"],["self"]],[["option",["u32"]],["u32"]]]],[11,"min","","最小値を求める",5,[[["self"]],[["option",["u32"]],["u32"]]]],[11,"max","","最大値を求める",5,[[["self"]],[["option",["u32"]],["u32"]]]],[0,"cumsum_2d","competitive_library::structure","二次元累積和",null,null],[3,"CumSum2D","competitive_library::structure::cumsum_2d","",null,null],[11,"new","","",6,[[],["self"]]],[11,"query","","",6,[[["self"],["usize"]],["i64"]]],[0,"dsu","competitive_library::structure","Union find",null,null],[3,"Dsu","competitive_library::structure::dsu","UnionFind",null,null],[11,"new","","",7,[[["usize"]],["dsu"]]],[11,"root","","",7,[[["self"],["usize"]],["usize"]]],[11,"unite","","",7,[[["self"],["usize"]],["bool"]]],[11,"is_same","","",7,[[["self"],["usize"]],["bool"]]],[11,"size","","",7,[[["self"],["usize"]],["usize"]]],[11,"get_same_group","","",7,[[["self"],["usize"]],[["usize"],["hashset",["usize"]]]]],[11,"get_all_groups","","",7,[[["self"]],[["hashmap",["usize","hashset"]],["usize"],["hashset",["usize"]]]]],[0,"fenwick_tree","competitive_library::structure","BIT",null,null],[3,"FenwickTree","competitive_library::structure::fenwick_tree","binaryIndexTree",null,null],[8,"Sum","","",null,null],[10,"sum","","",8,[[["self"],["t"]],["u"]]],[11,"new","","",9,[[["usize"]],["fenwicktree"]]],[11,"add","","",9,[[["self"],["usize"],["t"]]]],[0,"segment_tree","competitive_library::structure","セグメントツリー",null,null],[3,"Min","competitive_library::structure::segment_tree","",null,null],[3,"Max","","",null,null],[3,"SegmentTree","","",null,null],[8,"Monoid","","",null,null],[16,"T","","",10,null],[10,"identity_element","","",10,[[]]],[10,"binary_operation","","",10,[[]]],[11,"new","","",11,[[["usize"]],["segmenttree"]]],[11,"query","","",11,[[["self"],["usize"]]]],[11,"set","","",11,[[["self"],["usize"]]]],[11,"get","","",11,[[["self"],["usize"]]]],[11,"max_right","","",11,[[["f"],["self"],["usize"]],["usize"]]],[11,"min_left","","",11,[[["f"],["self"],["usize"]],["usize"]]],[0,"sparse_table","competitive_library::structure","SparseTable",null,null],[3,"SparseTable","competitive_library::structure::sparse_table","",null,null],[11,"new","","",12,[[],["self"]]],[11,"query","","",12,[[["self"],["usize"]],["i64"]]],[11,"from","competitive_library::algorithm::convex_hull_trick","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","competitive_library::algorithm::eratosthenes","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","competitive_library::algorithm::fast_eratosthenes","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","competitive_library::graph::dijkstra","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","competitive_library::graph::dijkstra_restorepath","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","competitive_library::structure::binary_trie","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","competitive_library::structure::cumsum_2d","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","competitive_library::structure::dsu","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","competitive_library::structure::fenwick_tree","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","competitive_library::structure::segment_tree","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","competitive_library::structure::sparse_table","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"sum","competitive_library::structure::fenwick_tree","",9,[[["self"],["usize"]],["t"]]],[11,"sum","","",9,[[["self"]],["t"]]],[11,"identity_element","competitive_library::structure::segment_tree","",14,[[]]],[11,"binary_operation","","",14,[[]]],[11,"identity_element","","",15,[[]]],[11,"binary_operation","","",15,[[]]],[11,"from","","",11,[[["vec"]],["self"]]],[11,"clone","competitive_library::graph::dijkstra","",3,[[["self"]],["node"]]],[11,"clone","competitive_library::graph::dijkstra_restorepath","",4,[[["self"]],["node"]]],[11,"clone","competitive_library::structure::binary_trie","",5,[[["self"]],["binarytrie"]]],[11,"clone","competitive_library::structure::cumsum_2d","",6,[[["self"]],["cumsum2d"]]],[11,"clone","competitive_library::structure::dsu","",7,[[["self"]],["dsu"]]],[11,"clone","competitive_library::structure::fenwick_tree","",9,[[["self"]],["fenwicktree"]]],[11,"default","competitive_library::algorithm::convex_hull_trick","",0,[[],["self"]]],[11,"default","competitive_library::structure::binary_trie","",5,[[],["binarytrie"]]],[11,"cmp","competitive_library::graph::dijkstra","",3,[[["self"]],["ordering"]]],[11,"cmp","competitive_library::graph::dijkstra_restorepath","",4,[[["self"]],["ordering"]]],[11,"eq","competitive_library::graph::dijkstra","",3,[[["node"],["self"]],["bool"]]],[11,"eq","competitive_library::graph::dijkstra_restorepath","",4,[[["self"],["node"]],["bool"]]],[11,"eq","competitive_library::structure::binary_trie","",5,[[["self"],["binarytrie"]],["bool"]]],[11,"ne","","",5,[[["self"],["binarytrie"]],["bool"]]],[11,"partial_cmp","competitive_library::graph::dijkstra","",3,[[["node"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","competitive_library::graph::dijkstra_restorepath","",4,[[["self"],["node"]],[["ordering"],["option",["ordering"]]]]],[11,"fmt","competitive_library::graph::dijkstra","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::graph::dijkstra_restorepath","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::structure::binary_trie","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::structure::cumsum_2d","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::structure::dsu","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::structure::fenwick_tree","",9,[[["formatter"],["self"]],["result"]]]],"p":[[3,"ConvexHullTrick"],[3,"LinearSieve"],[3,"Eratosthenes"],[3,"Node"],[3,"Node"],[3,"BinaryTrie"],[3,"CumSum2D"],[3,"Dsu"],[8,"Sum"],[3,"FenwickTree"],[8,"Monoid"],[3,"SegmentTree"],[3,"SparseTable"],[3,"LinearFunction"],[3,"Min"],[3,"Max"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);