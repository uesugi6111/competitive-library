var searchIndex={};
searchIndex["competitive_library"] = {"doc":"uesugi が競技プログラミングで使用する(した)ライブラリ群です…","i":[[0,"algorithm","competitive_library","アルゴリズムっぽいものが置いてあります",null,null],[0,"atkin","competitive_library::algorithm","アトキンの篩",null,null],[5,"sieve_of_atkin","competitive_library::algorithm::atkin","",null,[[["u64"]],[["vec",["bool"]],["bool"]]]],[0,"convex_hull_trick","competitive_library::algorithm","",null,null],[3,"LinearFunction","competitive_library::algorithm::convex_hull_trick","",null,null],[3,"ConvexHullTrick","","",null,null],[11,"new","","",0,[[],["self"]]],[11,"from","","",0,[[],["self"]]],[11,"add_line","","",0,[[["i64"],["self"]]]],[11,"query","","",0,[[["i64"],["self"]],["i64"]]],[0,"cumsum","competitive_library::algorithm","累積和",null,null],[5,"cumsum","competitive_library::algorithm::cumsum","",null,[[],[["i64"],["vec",["i64"]]]]],[0,"enum_divisors","competitive_library::algorithm","約数列挙",null,null],[5,"enum_divisors","competitive_library::algorithm::enum_divisors","",null,[[["i64"]],[["i64"],["vec",["i64"]]]]],[0,"eratosthenes","competitive_library::algorithm","エラトステネス",null,null],[3,"LinearSieve","competitive_library::algorithm::eratosthenes","",null,null],[12,"table","","",1,null],[12,"primes","","",1,null],[11,"new","","",1,[[["usize"]],["self"]]],[11,"factorize","","",1,[[["i64"],["self"]],[["btreemap",["i64","i64"]],["i64"]]]],[11,"divisors","","",1,[[["i64"],["self"]],[["i64"],["vec",["i64"]]]]],[11,"is_prime","","",1,[[["i64"],["self"]],["bool"]]],[0,"fast_eratosthenes","competitive_library::algorithm","エラトステネス",null,null],[3,"Eratosthenes","competitive_library::algorithm::fast_eratosthenes","エラトステネスの篩",null,null],[11,"new","","初期化 素数フラグを処理 - param n:usize 探索上限",2,[[["usize"]],["self"]]],[11,"count","","素数の個数をカウント",2,[[["self"]],["usize"]]],[11,"primes","","フラグから素数配列を生成",2,[[["self"]],[["usize"],["vec",["usize"]]]]],[0,"inversion_number","competitive_library::algorithm","転倒数",null,null],[5,"inversion_number","competitive_library::algorithm::inversion_number","",null,[[],["i64"]]],[0,"largest_rectangle","competitive_library::algorithm","最大長方形",null,null],[5,"largest_rectangle","competitive_library::algorithm::largest_rectangle","",null,[[],["i64"]]],[0,"prime","competitive_library::algorithm","試割",null,null],[5,"trial_division","competitive_library::algorithm::prime","",null,[[["i64"]],[["hashmap",["i64","i64"]],["i64"]]]],[0,"run_length","competitive_library::algorithm","ランレングス",null,null],[5,"compress","competitive_library::algorithm::run_length","",null,[[["str"]],["vec"]]],[0,"graph","competitive_library","グラフに関係しそうなもの",null,null],[0,"dijkstra","competitive_library::graph","ダイクストラ",null,null],[3,"Node","competitive_library::graph::dijkstra","",null,null],[5,"dijkstra","","",null,[[["usize"]],[["option",["i64"]],["i64"]]]],[11,"new","","",3,[[["i64"],["usize"]],["self"]]],[0,"dijkstra_restorepath","competitive_library::graph","ダイクストラ",null,null],[3,"Node","competitive_library::graph::dijkstra_restorepath","",null,null],[5,"dijkstra","","",null,[[["usize"]],["option"]]],[11,"new","","",4,[[["i64"],["option",["usize"]],["usize"]],["self"]]],[0,"euler_tour","competitive_library::graph","",null,null],[4,"Vertex","competitive_library::graph::euler_tour","",null,null],[13,"In","","",5,null],[13,"Out","","",5,null],[5,"euler_tour","","",null,[[["usize"]]]],[11,"get_value","","",5,[[["self"]],["usize"]]],[0,"floyd_warshall","competitive_library::graph","ワーシャルフロイト",null,null],[5,"floyd_warshall","competitive_library::graph::floyd_warshall","",null,[[],[["vec",["option"]],["vec",["vec"]]]]],[0,"lowest_common_ancestor_doubling","competitive_library::graph","",null,null],[3,"LowestCommonAncestor","competitive_library::graph::lowest_common_ancestor_doubling","",null,null],[11,"new","","",6,[[["usize"]],["self"]]],[11,"get_lca","","",6,[[["self"],["usize"]],[["option",["usize"]],["usize"]]]],[11,"get_distance","","",6,[[["self"],["usize"]],["i64"]]],[0,"lowest_common_ancestor_rmq","competitive_library::graph","RMQ を使用しLCAを求める",null,null],[3,"LowestCommonAncestor","competitive_library::graph::lowest_common_ancestor_rmq","LCA",null,null],[11,"new","","Arguments * `e` - 根付き木の辺集合。隣接リスト * `root` - 根付き木の根",7,[[["usize"]],["self"]]],[11,"get_lca","","対象の2頂点のLCAを取得する",7,[[["self"],["usize"]],["usize"]]],[0,"minimun_spanning_tree_kruskal","competitive_library::graph","",null,null],[3,"Edge","competitive_library::graph::minimun_spanning_tree_kruskal","",null,null],[5,"kruskal","","",null,[[["usize"]],["i64"]]],[0,"minimun_spanning_tree_prim","competitive_library::graph","",null,null],[5,"prim","competitive_library::graph::minimun_spanning_tree_prim","O(|N|^2)",null,[[],["i64"]]],[5,"prim_heap","","O(|E|log|V|)",null,[[],[["option",["i64"]],["i64"]]]],[0,"tree_diamiter","competitive_library::graph","",null,null],[3,"UnWeightedEdge","competitive_library::graph::tree_diamiter","",null,null],[3,"WeightedEdge","","",null,null],[5,"tree_diamiter","","",null,[[]]],[8,"Edge","","",null,null],[16,"T","","",8,null],[10,"get_edge","","",8,[[],["usize"]]],[10,"get_cost","","",8,[[],["i64"]]],[0,"util","competitive_library::graph","隣接行列 ←→ 隣接リスト",null,null],[5,"to_adjacency_matrix","competitive_library::graph::util","",null,[[],[["vec",["option"]],["vec",["vec"]]]]],[5,"adjacency_list","","",null,[[],[["vec",["vec"]],["vec",["i64"]]]]],[0,"math","competitive_library","数学っぽいもの",null,null],[0,"euclid","competitive_library::math","ユークリッドさんありがとう",null,null],[5,"gcd","competitive_library::math::euclid","",null,[[["i64"]],["i64"]]],[5,"lcm","","",null,[[["i64"]],["i64"]]],[0,"mod_pow","competitive_library::math","累乗剰余",null,null],[5,"modpow","competitive_library::math::mod_pow","",null,[[["i64"]],["i64"]]],[0,"permutation","competitive_library::math","順列生成",null,null],[5,"make_permutation","competitive_library::math::permutation","",null,[[["usize"]],[["vec",["vec"]],["vec",["usize"]]]]],[0,"string","competitive_library","文字列に関係しそうなもの",null,null],[0,"rollinghash","competitive_library::string","ロリハ",null,null],[5,"rolling_hash","competitive_library::string::rollinghash","",null,[[],["bool"]]],[0,"z_algorithm","competitive_library::string","Z algorithm",null,null],[5,"z_algorithm","competitive_library::string::z_algorithm","",null,[[],[["usize"],["vec",["usize"]]]]],[0,"structure","competitive_library","データ構造っぽいもの",null,null],[0,"binary_trie","competitive_library::structure","BinaryTire",null,null],[3,"BinaryTrie","competitive_library::structure::binary_trie","",null,null],[11,"new","","構築",9,[[],["self"]]],[11,"insert","","値の挿入",9,[[["self"],["u32"]],["option"]]],[11,"count","","値のカウント",9,[[["u32"],["self"]],[["option",["u32"]],["u32"]]]],[11,"erase","","値の削除",9,[[["self"],["u32"]],["option"]]],[11,"erase_all","","値をすべて削除",9,[[["self"],["u32"]],["option"]]],[11,"xor_min","","xor 後の最小値を求める",9,[[["u32"],["self"]],[["option",["u32"]],["u32"]]]],[11,"min","","最小値を求める",9,[[["self"]],[["option",["u32"]],["u32"]]]],[11,"max","","最大値を求める",9,[[["self"]],[["option",["u32"]],["u32"]]]],[0,"cumsum_2d","competitive_library::structure","二次元累積和",null,null],[3,"CumSum2D","competitive_library::structure::cumsum_2d","",null,null],[11,"new","","",10,[[],["self"]]],[11,"query","","",10,[[["self"],["usize"]],["i64"]]],[0,"disjoint_set_union","competitive_library::structure","Union find",null,null],[3,"Dsu","competitive_library::structure::disjoint_set_union","UnionFind",null,null],[11,"new","","",11,[[["usize"]],["dsu"]]],[11,"root","","",11,[[["self"],["usize"]],["usize"]]],[11,"unite","","",11,[[["self"],["usize"]],["bool"]]],[11,"is_same","","",11,[[["self"],["usize"]],["bool"]]],[11,"size","","",11,[[["self"],["usize"]],["usize"]]],[11,"get_same_group","","",11,[[["self"],["usize"]],[["usize"],["hashset",["usize"]]]]],[11,"get_all_groups","","",11,[[["self"]],[["hashmap",["usize","hashset"]],["usize"],["hashset",["usize"]]]]],[0,"disjoint_set_union_undo","competitive_library::structure","Union find undo",null,null],[3,"DisjointSetUnionRollback","competitive_library::structure::disjoint_set_union_undo","UnionFind 経路圧縮を行わないことで undo を可能にする",null,null],[11,"new","","要素数 n の dsu を構築する",12,[[["usize"]],["disjointsetunionrollback"]]],[11,"root","","根を取得 経路圧縮を行わない",12,[[["self"],["usize"]],["usize"]]],[11,"unite","","対象の木をマージ 経路圧縮を行わないため変更されるノード数は高々2 変更箇所をスタックで保存",12,[[["self"],["usize"]],["bool"]]],[11,"is_same","","同じ木に存在するか",12,[[["self"],["usize"]],["bool"]]],[11,"size","","所属する木のサイズ",12,[[["self"],["usize"]],["usize"]]],[11,"undo","","unite 操作の undo",12,[[["self"]]]],[11,"snapshot","","現時点の状態を保存 復元には rollback_snapshot",12,[[["self"]]]],[11,"get_history_length","","現時点での保存されている操作回数を返す",12,[[["self"]],["usize"]]],[11,"rollback_snapshot","","rollback_snapshot で保存された状態へ復元",12,[[["self"]]]],[11,"rollback","","復元 任意のタイミングで get_history_length を実行し取得した 値を使用する",12,[[["self"],["usize"]]]],[11,"get_same_group","","同じ木に含まれるノードを返す",12,[[["self"],["usize"]],[["usize"],["hashset",["usize"]]]]],[11,"get_all_groups","","全ノードを返却",12,[[["self"]],[["hashmap",["usize","hashset"]],["usize"],["hashset",["usize"]]]]],[0,"disjoint_sparse_table","competitive_library::structure","",null,null],[3,"Add","competitive_library::structure::disjoint_sparse_table","",null,null],[3,"DisjointSparseTable","","",null,null],[12,"table","","",13,null],[8,"SemiGroup","","",null,null],[16,"T","","",14,null],[10,"operate","","",14,[[]]],[11,"new","","",13,[[],["self"]]],[11,"fold","","",13,[[["range",["usize"]],["self"],["usize"]]]],[0,"fenwick_tree","competitive_library::structure","BIT",null,null],[3,"Add","competitive_library::structure::fenwick_tree","",null,null],[3,"FenwickTree","","Binary Index Tree",null,null],[8,"Monoid","","",null,null],[16,"T","","",15,null],[10,"identity_element","","",15,[[]]],[10,"binary_operation","","",15,[[]]],[11,"new","","",16,[[["usize"]],["fenwicktree"]]],[11,"operate","","",16,[[["self"],["usize"]]]],[11,"fold","","(0..end)",16,[[["self"],["usize"]]]],[0,"segment_tree","competitive_library::structure","セグメントツリー",null,null],[3,"Min","competitive_library::structure::segment_tree","",null,null],[3,"Max","","",null,null],[3,"SegmentTree","","",null,null],[8,"Monoid","","",null,null],[16,"T","","",17,null],[10,"identity_element","","",17,[[]]],[10,"binary_operation","","",17,[[]]],[11,"new","","",18,[[["usize"]],["segmenttree"]]],[11,"query","","",18,[[["self"],["usize"]]]],[11,"set","","",18,[[["self"],["usize"]]]],[11,"get","","",18,[[["self"],["usize"]]]],[11,"max_right","","",18,[[["f"],["self"],["usize"]],["usize"]]],[11,"min_left","","",18,[[["f"],["self"],["usize"]],["usize"]]],[0,"skew_heap","competitive_library::structure","Skew Heap",null,null],[3,"Heap","competitive_library::structure::skew_heap","",null,null],[12,"value","","",19,null],[12,"left","","",19,null],[12,"right","","",19,null],[3,"SkewHeap","","",null,null],[11,"new","","",19,[[["t"]],[["box",["heap"]],["option",["box"]]]]],[11,"new","","",20,[[],["self"]]],[11,"push","","",20,[[["self"],["t"]]]],[11,"top","","",20,[[["self"]],["option"]]],[11,"pop","","",20,[[["self"]],["option"]]],[11,"merge","","",20,[[["option"],["box",["heap"]],["option",["box"]]]]],[0,"skew_heap_lazy","competitive_library::structure","Skew Heap Lazy",null,null],[3,"Heap","competitive_library::structure::skew_heap_lazy","",null,null],[12,"cost","","",21,null],[12,"value","","",21,null],[12,"lazy","","",21,null],[12,"left","","",21,null],[12,"right","","",21,null],[3,"SkewHeap","","",null,null],[11,"new","","",21,[[["i64"],["t"]],[["option",["box"]],["box",["heap"]]]]],[11,"new","","",22,[[],["self"]]],[11,"push","","",22,[[["i64"],["self"],["t"]]]],[11,"top","","",22,[[["self"]],["option"]]],[11,"pop","","",22,[[["self"]],["option"]]],[11,"merge","","",22,[[["option",["box"]],["option"],["box",["heap"]]]]],[11,"add","","",22,[[["i64"],["self"]]]],[0,"sparse_table","competitive_library::structure","SparseTable 冪等半群列にたいして区間(l,r] の結果を戻す 構築 O(NlogN) クエリO(1)…",null,null],[3,"Min","competitive_library::structure::sparse_table","最小値",null,null],[3,"SparseTable","","SparseTable",null,null],[8,"Band","","冪等半群",null,null],[16,"T","","",23,null],[10,"operate","","",23,[[]]],[11,"new","","O(NlogN)",24,[[],["self"]]],[11,"fold","","[l,r) O(1)",24,[[["range",["usize"]],["self"],["usize"]]]],[0,"weighted_disjoint_set_union","competitive_library::structure","Weighted Union Find",null,null],[3,"WeightedDisjointSetUnion","competitive_library::structure::weighted_disjoint_set_union","UnionFind",null,null],[11,"new","","",25,[[["usize"]],["weighteddisjointsetunion"]]],[11,"root","","",25,[[["self"],["usize"]]]],[11,"unite","","",25,[[["i64"],["self"],["usize"]],["bool"]]],[11,"is_same","","",25,[[["self"],["usize"]],["bool"]]],[11,"size","","",25,[[["self"],["usize"]],["usize"]]],[11,"get_diff","","",25,[[["self"],["usize"]],["i64"]]],[11,"get_same_group","","",25,[[["self"],["usize"]],[["usize"],["hashset",["usize"]]]]],[11,"get_all_groups","","",25,[[["self"]],[["hashmap",["usize","hashset"]],["usize"],["hashset"]]]],[11,"from","competitive_library::algorithm::convex_hull_trick","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","competitive_library::algorithm::eratosthenes","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","competitive_library::algorithm::fast_eratosthenes","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","competitive_library::graph::dijkstra","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","competitive_library::graph::dijkstra_restorepath","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","competitive_library::graph::euler_tour","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","competitive_library::graph::lowest_common_ancestor_doubling","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","competitive_library::graph::lowest_common_ancestor_rmq","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","competitive_library::graph::minimun_spanning_tree_kruskal","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","competitive_library::graph::tree_diamiter","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from","competitive_library::structure::binary_trie","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","competitive_library::structure::cumsum_2d","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","competitive_library::structure::disjoint_set_union","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","competitive_library::structure::disjoint_set_union_undo","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","competitive_library::structure::disjoint_sparse_table","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","competitive_library::structure::fenwick_tree","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","competitive_library::structure::segment_tree","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","competitive_library::structure::skew_heap","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","competitive_library::structure::skew_heap_lazy","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","competitive_library::structure::sparse_table","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","competitive_library::structure::weighted_disjoint_set_union","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"get_edge","competitive_library::graph::tree_diamiter","",28,[[],["usize"]]],[11,"get_cost","","",28,[[],["i64"]]],[11,"get_edge","","",29,[[],["usize"]]],[11,"get_cost","","",29,[[],["i64"]]],[11,"operate","competitive_library::structure::disjoint_sparse_table","",30,[[]]],[11,"identity_element","competitive_library::structure::fenwick_tree","",31,[[]]],[11,"binary_operation","","",31,[[]]],[11,"identity_element","competitive_library::structure::segment_tree","",32,[[]]],[11,"binary_operation","","",32,[[]]],[11,"identity_element","","",33,[[]]],[11,"binary_operation","","",33,[[]]],[11,"operate","competitive_library::structure::sparse_table","",34,[[]]],[11,"from","competitive_library::structure::segment_tree","",18,[[["vec"]],["self"]]],[11,"clone","competitive_library::graph::dijkstra","",3,[[["self"]],["node"]]],[11,"clone","competitive_library::graph::dijkstra_restorepath","",4,[[["self"]],["node"]]],[11,"clone","competitive_library::structure::binary_trie","",9,[[["self"]],["binarytrie"]]],[11,"clone","competitive_library::structure::cumsum_2d","",10,[[["self"]],["cumsum2d"]]],[11,"clone","competitive_library::structure::disjoint_set_union","",11,[[["self"]],["dsu"]]],[11,"clone","competitive_library::structure::disjoint_set_union_undo","",12,[[["self"]],["disjointsetunionrollback"]]],[11,"clone","competitive_library::structure::fenwick_tree","",16,[[["self"]],["fenwicktree"]]],[11,"clone","competitive_library::structure::skew_heap","",19,[[["self"]],["heap"]]],[11,"clone","","",20,[[["self"]],["skewheap"]]],[11,"clone","competitive_library::structure::skew_heap_lazy","",21,[[["self"]],["heap"]]],[11,"clone","","",22,[[["self"]],["skewheap"]]],[11,"clone","competitive_library::structure::weighted_disjoint_set_union","",25,[[["self"]],["weighteddisjointsetunion"]]],[11,"default","competitive_library::algorithm::convex_hull_trick","",0,[[],["self"]]],[11,"default","competitive_library::structure::binary_trie","",9,[[],["binarytrie"]]],[11,"default","competitive_library::structure::skew_heap","",20,[[],["skewheap"]]],[11,"default","competitive_library::structure::skew_heap_lazy","",22,[[],["skewheap"]]],[11,"cmp","competitive_library::graph::dijkstra","",3,[[["self"]],["ordering"]]],[11,"cmp","competitive_library::graph::dijkstra_restorepath","",4,[[["self"]],["ordering"]]],[11,"cmp","competitive_library::structure::skew_heap","",19,[[["self"],["heap"]],["ordering"]]],[11,"cmp","competitive_library::structure::skew_heap_lazy","",21,[[["self"],["heap"]],["ordering"]]],[11,"eq","competitive_library::graph::dijkstra","",3,[[["self"],["node"]],["bool"]]],[11,"eq","competitive_library::graph::dijkstra_restorepath","",4,[[["node"],["self"]],["bool"]]],[11,"eq","competitive_library::structure::binary_trie","",9,[[["binarytrie"],["self"]],["bool"]]],[11,"ne","","",9,[[["binarytrie"],["self"]],["bool"]]],[11,"eq","competitive_library::structure::skew_heap","",19,[[["self"],["heap"]],["bool"]]],[11,"ne","","",19,[[["self"],["heap"]],["bool"]]],[11,"eq","competitive_library::structure::skew_heap_lazy","",21,[[["self"],["heap"]],["bool"]]],[11,"ne","","",21,[[["self"],["heap"]],["bool"]]],[11,"partial_cmp","competitive_library::graph::dijkstra","",3,[[["self"],["node"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","competitive_library::graph::dijkstra_restorepath","",4,[[["node"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","competitive_library::structure::skew_heap","",19,[[["self"],["heap"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",19,[[["self"],["heap"]],["bool"]]],[11,"le","","",19,[[["self"],["heap"]],["bool"]]],[11,"gt","","",19,[[["self"],["heap"]],["bool"]]],[11,"ge","","",19,[[["self"],["heap"]],["bool"]]],[11,"partial_cmp","competitive_library::structure::skew_heap_lazy","",21,[[["self"],["heap"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",21,[[["self"],["heap"]],["bool"]]],[11,"le","","",21,[[["self"],["heap"]],["bool"]]],[11,"gt","","",21,[[["self"],["heap"]],["bool"]]],[11,"ge","","",21,[[["self"],["heap"]],["bool"]]],[11,"fmt","competitive_library::graph::dijkstra","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::graph::dijkstra_restorepath","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::graph::euler_tour","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::structure::binary_trie","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::structure::cumsum_2d","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::structure::disjoint_set_union","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::structure::disjoint_set_union_undo","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::structure::disjoint_sparse_table","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::structure::fenwick_tree","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::structure::skew_heap","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::structure::skew_heap_lazy","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::structure::weighted_disjoint_set_union","",25,[[["formatter"],["self"]],["result"]]]],"p":[[3,"ConvexHullTrick"],[3,"LinearSieve"],[3,"Eratosthenes"],[3,"Node"],[3,"Node"],[4,"Vertex"],[3,"LowestCommonAncestor"],[3,"LowestCommonAncestor"],[8,"Edge"],[3,"BinaryTrie"],[3,"CumSum2D"],[3,"Dsu"],[3,"DisjointSetUnionRollback"],[3,"DisjointSparseTable"],[8,"SemiGroup"],[8,"Monoid"],[3,"FenwickTree"],[8,"Monoid"],[3,"SegmentTree"],[3,"Heap"],[3,"SkewHeap"],[3,"Heap"],[3,"SkewHeap"],[8,"Band"],[3,"SparseTable"],[3,"WeightedDisjointSetUnion"],[3,"LinearFunction"],[3,"Edge"],[3,"UnWeightedEdge"],[3,"WeightedEdge"],[3,"Add"],[3,"Add"],[3,"Min"],[3,"Max"],[3,"Min"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);