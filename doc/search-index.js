var searchIndex = JSON.parse('{\
"competitive_library":{"doc":"uesugi …","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,11,11,11,11,11,11,11,11,12,12,11,11,11,3,11,11,11,11,11,11,11,11,11,11,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,3,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,13,13,4,11,11,5,11,11,11,11,11,11,11,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,5,11,11,11,5,5,8,16,3,3,11,11,11,11,11,11,10,11,11,10,11,11,11,11,5,11,11,11,11,11,11,5,5,3,5,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,5,5,5,5,5,0,0,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,8,16,11,11,11,11,11,11,11,11,11,11,11,10,11,12,11,11,11,11,11,11,3,3,8,16,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,3,3,8,3,16,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,3,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,8,3,3,16,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["algorithm","graph","math","other","string","structure","atkin","convex_hull_trick","cumsum","enum_divisors","eratosthenes","fast_eratosthenes","inversion_number","largest_rectangle","prime","run_length","generate_primes","ConvexHullTrick","LinearFunction","add_line","borrow","borrow","borrow_mut","borrow_mut","default","from","from","from","into","into","new","query","try_from","try_from","try_into","try_into","type_id","type_id","cumsum","enum_divisors","Sieve","borrow","borrow_mut","divisors","factorize","from","into","is_prime","new","primes","table","try_from","try_into","type_id","Eratosthenes","borrow","borrow_mut","count","from","into","new","primes","try_from","try_into","type_id","inversion_number","largest_rectangle","trial_division","compress","dijkstra","dijkstra_restorepath","euler_tour","floyd_warshall","heavy_hight_decomposition","lowest_common_ancestor_doubling","lowest_common_ancestor_rmq","minimun_spanning_tree_kruskal","minimun_spanning_tree_prim","tree_diamiter","util","zero_one_bfs","Node","borrow","borrow_mut","clone","clone_into","cmp","dijkstra","eq","fmt","from","into","new","partial_cmp","to_owned","try_from","try_into","type_id","Node","borrow","borrow_mut","clone","clone_into","cmp","dijkstra","eq","fmt","from","into","new","partial_cmp","to_owned","try_from","try_into","type_id","In","Out","Vertex","borrow","borrow_mut","euler_tour","fmt","from","get_value","into","try_from","try_into","type_id","floyd_warshall","HeavyLightDecomposition","borrow","borrow_mut","clone","clone_into","decompose","fmt","from","get_lca","into","new","query","to_owned","try_from","try_into","type_id","LowestCommonAncestor","borrow","borrow_mut","from","get_distance","get_lca","into","new","try_from","try_into","type_id","LowestCommonAncestor","borrow","borrow_mut","from","get_lca","into","new","try_from","try_into","type_id","Edge","borrow","borrow_mut","from","into","kruskal","try_from","try_into","type_id","prim","prim_heap","Edge","T","UnWeightedEdge","WeightedEdge","borrow","borrow","borrow_mut","borrow_mut","from","from","get_cost","get_cost","get_cost","get_edge","get_edge","get_edge","into","into","tree_diamiter","try_from","try_from","try_into","try_into","type_id","type_id","adjacency_list","to_adjacency_matrix","Node","bfs","borrow","borrow_mut","clone","clone_into","fmt","from","into","new","to_owned","try_from","try_into","type_id","euclid","miller_rabin","mod_pow","permutation","gcd","lcm","is_prime","modpow","make_permutation","binary_search","xorshift","BinarySearch","borrow","borrow_mut","from","into","new","search","try_from","try_into","type_id","XorShift","borrow","borrow_mut","clone","clone_into","default","fmt","from","from_seed","into","into_iter","new","next","to_owned","try_from","try_into","type_id","rollinghash","z_algorithm","rolling_hash","z_algorithm","binary_trie","cumsum_2d","disjoint_set_union","disjoint_set_union_undo","disjoint_sparse_table","fenwick_tree","segment_tree","skew_heap","skew_heap_lazy","sparse_table","weighted_disjoint_set_union","BinaryTrie","borrow","borrow_mut","clone","clone_into","count","default","eq","erase","erase_all","fmt","from","insert","into","max","min","ne","new","to_owned","try_from","try_into","type_id","xor_min","CumSum2D","borrow","borrow_mut","clone","clone_into","fmt","from","into","new","query","to_owned","try_from","try_into","type_id","DisjointSetUnion","borrow","borrow_mut","clone","clone_into","fmt","from","get_all_groups","get_same_group","into","is_same","new","root","size","to_owned","try_from","try_into","type_id","unite","DisjointSetUnionRollback","borrow","borrow_mut","clone","clone_into","fmt","from","get_all_groups","get_history_length","get_same_group","into","is_same","new","rank","rollback","rollback_snapshot","root","size","snapshot","to_owned","try_from","try_into","type_id","undo","unite","Add","DisjointSparseTable","SemiGroup","T","borrow","borrow","borrow_mut","borrow_mut","fmt","fold","from","from","into","into","new","operate","operate","table","try_from","try_from","try_into","try_into","type_id","type_id","Add","FenwickTree","Monoid","T","binary_operation","binary_operation","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","fold","from","from","identity_element","identity_element","into","into","new","operate","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Max","Min","Monoid","SegmentTree","T","binary_operation","binary_operation","binary_operation","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","get","identity_element","identity_element","identity_element","into","into","into","max_right","min_left","new","query","set","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Heap","SkewHeap","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","default","eq","fmt","from","from","into","into","left","merge","ne","new","new","partial_cmp","pop","push","right","to_owned","to_owned","top","try_from","try_from","try_into","try_into","type_id","type_id","value","Heap","SkewHeap","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cost","default","eq","fmt","from","from","into","into","lazy","left","merge","ne","new","new","partial_cmp","pop","push","right","to_owned","to_owned","top","try_from","try_from","try_into","try_into","type_id","type_id","value","Band","Min","SparseTable","T","borrow","borrow","borrow_mut","borrow_mut","fold","from","from","into","into","new","operate","operate","try_from","try_from","try_into","try_into","type_id","type_id","WeightedDisjointSetUnion","borrow","borrow_mut","clone","clone_into","fmt","from","get_all_groups","get_diff","get_same_group","into","is_same","new","root","size","to_owned","try_from","try_into","type_id","unite"],"q":["competitive_library","","","","","","competitive_library::algorithm","","","","","","","","","","competitive_library::algorithm::atkin","competitive_library::algorithm::convex_hull_trick","","","","","","","","","","","","","","","","","","","","","competitive_library::algorithm::cumsum","competitive_library::algorithm::enum_divisors","competitive_library::algorithm::eratosthenes","","","","","","","","","","","","","","competitive_library::algorithm::fast_eratosthenes","","","","","","","","","","","competitive_library::algorithm::inversion_number","competitive_library::algorithm::largest_rectangle","competitive_library::algorithm::prime","competitive_library::algorithm::run_length","competitive_library::graph","","","","","","","","","","","","competitive_library::graph::dijkstra","","","","","","","","","","","","","","","","","competitive_library::graph::dijkstra_restorepath","","","","","","","","","","","","","","","","","competitive_library::graph::euler_tour","","","","","","","","","","","","","competitive_library::graph::floyd_warshall","competitive_library::graph::heavy_hight_decomposition","","","","","","","","","","","","","","","","competitive_library::graph::lowest_common_ancestor_doubling","","","","","","","","","","","competitive_library::graph::lowest_common_ancestor_rmq","","","","","","","","","","competitive_library::graph::minimun_spanning_tree_kruskal","","","","","","","","","competitive_library::graph::minimun_spanning_tree_prim","","competitive_library::graph::tree_diamiter","","","","","","","","","","","","","","","","","","","","","","","","","competitive_library::graph::util","","competitive_library::graph::zero_one_bfs","","","","","","","","","","","","","","competitive_library::math","","","","competitive_library::math::euclid","","competitive_library::math::miller_rabin","competitive_library::math::mod_pow","competitive_library::math::permutation","competitive_library::other","","competitive_library::other::binary_search","","","","","","","","","","competitive_library::other::xorshift","","","","","","","","","","","","","","","","","competitive_library::string","","competitive_library::string::rollinghash","competitive_library::string::z_algorithm","competitive_library::structure","","","","","","","","","","","competitive_library::structure::binary_trie","","","","","","","","","","","","","","","","","","","","","","","competitive_library::structure::cumsum_2d","","","","","","","","","","","","","","competitive_library::structure::disjoint_set_union","","","","","","","","","","","","","","","","","","","competitive_library::structure::disjoint_set_union_undo","","","","","","","","","","","","","","","","","","","","","","","","","competitive_library::structure::disjoint_sparse_table","","","","","","","","","","","","","","","","","","","","","","","","competitive_library::structure::fenwick_tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive_library::structure::segment_tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive_library::structure::skew_heap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive_library::structure::skew_heap_lazy","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive_library::structure::sparse_table","","","","","","","","","","","","","","","","","","","","","","competitive_library::structure::weighted_disjoint_set_union","","","","","","","","","","","","","","","","","","",""],"d":["アルゴリズムっぽいものが置いてあります","グラフに関係しそうなもの","数学っぽいもの","","文字列に関係しそうなもの","データ構造っぽいもの","アトキンの篩","","累積和","約数列挙","エラトステネス","エラトステネス","転倒数","最大長方形","試割","ランレングス","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","エラトステネスの篩","","","素数の個数をカウント","","","初期化 素数フラグを処理","フラグから素数配列を生成","","","","","","","","ダイクストラ","ダイクストラ","","ワーシャルフロイト","HL 分解","ダブリングを使用してLCA を求める","RMQ を使用しLCAを求める","","","","隣接行列 ←→ 隣接リスト","ダイクストラ","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","分解","","","LCA を求める","","","HLD 配列の区間を返す","","","","","","","","","","","","","","","","LCA","","","","対象の2頂点のLCAを取得する","","Arguments","","","","","","","","","","","","","O(|N|^2)","O(|E|log|V|)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ユークリッドさんありがとう","","累乗剰余","順列生成","","","","","","","Xorshift random number generator","","","","","","","f が true を帰す最小値を探す","","","","","","","","","","","","","","","","","","","","","ロリハ","Z algorithm","","","BinaryTire","二次元累積和","Union find","Union find undo","","BIT","セグメントツリー","Skew Heap","Skew Heap Lazy","SparseTable 冪等半群列にたいして区間[l,r) …","Weighted Union Find","","","","","","値のカウント","","","値の削除","値をすべて削除","","","値の挿入","","最大値を求める","最小値を求める","","構築","","","","","xor 後の最小値を求める","","","","","","","","","","","","","","","UnionFind","","","","","","","","","","","","","","","","","","","UnionFind 経路圧縮を行わないことで undo …","","","","","","","全ノードを返却","現時点での保存されている操作回数を返す","同じ木に含まれるノードを返す","","同じ木に存在するか","要素数 n の dsu を構築する","所属する木のランク","復元 任意のタイミングで get_history_length …","rollback_snapshot で保存された状態へ復元","根を取得 経路圧縮を行わない","所属する木のサイズ","現時点の状態を保存 復元には rollback_snapshot","","","","","unite 操作の undo","対象の木をマージ …","","","","","","","","","","","","","","","","","","","","","","","","","","Binary Index Tree","","","","","","","","","","","","(0..end)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","冪等半群","最小値","SparseTable","","","","","","[l,r) O(1)","","","","","O(NlogN)","","","","","","","","","UnionFind","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,1,2,1,1,2,1,1,1,2,1,2,1,2,1,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,0,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,0,5,5,5,5,5,5,5,5,5,5,0,6,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6,7,7,0,7,7,0,7,7,7,7,7,7,7,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,9,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,10,10,10,0,11,11,11,11,0,11,11,11,0,0,0,12,0,0,13,14,13,14,13,14,12,13,14,12,13,14,13,14,0,13,14,13,14,13,14,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,16,16,16,16,16,16,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,19,19,19,19,19,19,19,19,19,19,19,19,19,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,0,0,22,23,24,23,24,24,24,23,24,23,24,24,22,23,24,23,24,23,24,23,24,0,0,0,25,25,26,26,27,26,27,27,27,27,27,26,27,25,26,26,27,27,27,27,26,27,26,27,26,27,0,0,0,0,28,28,29,30,29,30,31,29,30,31,29,30,31,31,31,28,29,30,29,30,31,31,31,31,31,31,29,30,31,29,30,31,29,30,31,0,0,32,33,32,33,32,33,32,33,32,33,32,32,32,33,32,33,32,33,32,32,33,32,33,33,32,32,33,33,32,33,32,33,32,33,32,0,0,34,35,34,35,34,35,34,35,34,35,35,34,35,35,35,34,35,34,35,35,34,35,35,34,35,34,34,35,35,34,34,35,34,35,34,35,34,35,0,0,0,36,37,38,37,38,38,37,38,37,38,38,36,37,37,38,37,38,37,38,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u64",15]],[["vec",3,["bool"]],["bool",15]]],null,null,[[["i64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i64",15]],["i64",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],[["vec",3,["i64"]],["i64",15]]],[[["i64",15]],[["vec",3,["i64"]],["i64",15]]],null,[[]],[[]],[[["i64",15]],[["vec",3,["i64"]],["i64",15]]],[[["i64",15]],[["btreemap",3,["i64","i64"]],["i64",15]]],[[]],[[]],[[["i64",15]],["bool",15]],[[["usize",15]]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[],["usize",15]],[[]],[[]],[[["usize",15]]],[[],[["vec",3,["usize"]],["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["i64",15]],[[],["i64",15]],[[["i64",15]],[["i64",15],["hashmap",3,["i64","i64"]]]],[[["str",15]],["vec",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["node",3]],[[]],[[],["ordering",4]],[[["usize",15]],[["i64",15],["option",4,["i64"]]]],[[["node",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["usize",15],["i64",15]]],[[["node",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[],["node",3]],[[]],[[],["ordering",4]],[[["usize",15]],["option",4]],[[["node",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["usize",15],["option",4,["usize"]],["i64",15]]],[[["node",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[]],[[]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],[["vec",3,["option"]],["vec",3,["vec"]]]],null,[[]],[[]],[[],["heavylightdecomposition",3]],[[]],[[],[["vec",3,["usize"]],["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["usize",15]],[["usize",15],["option",4,["usize"]]]],[[]],[[["usize",15]]],[[["usize",15]],["vec",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[]],[[["usize",15]],["i64",15]],[[["usize",15]],[["usize",15],["option",4,["usize"]]]],[[]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[]],[[["usize",15]],["usize",15]],[[]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[["usize",15]],["i64",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["i64",15]],[[],[["i64",15],["option",4,["i64"]]]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["i64",15]],[[],["i64",15]],[[],["i64",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],[["vec",3,["i64"]],["vec",3,["vec"]]]],[[],[["vec",3,["option"]],["vec",3,["vec"]]]],null,[[["usize",15]],[["i64",15],["option",4,["i64"]]]],[[]],[[]],[[],["node",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["usize",15],["i64",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[["i64",15]],["i64",15]],[[["i64",15]],["i64",15]],[[["i64",15]],["bool",15]],[[["i64",15]],["i64",15]],[[["usize",15]],[["vec",3,["vec"]],["vec",3,["usize"]]]],null,null,null,[[]],[[]],[[]],[[]],[[["i64",15]]],[[],["i64",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[],["xorshift",3]],[[]],[[],["xorshift",3]],[[["formatter",3]],["result",6]],[[]],[[["u64",15]]],[[]],[[]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[],["bool",15]],[[],[["vec",3,["usize"]],["usize",15]]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["binarytrie",3]],[[]],[[["u32",15]],[["option",4,["u32"]],["u32",15]]],[[],["binarytrie",3]],[[["binarytrie",3]],["bool",15]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["formatter",3]],["result",6]],[[]],[[["u32",15]],["option",4]],[[]],[[],[["option",4,["u32"]],["u32",15]]],[[],[["option",4,["u32"]],["u32",15]]],[[["binarytrie",3]],["bool",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["u32",15]],[["option",4,["u32"]],["u32",15]]],null,[[]],[[]],[[],["cumsum2d",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["usize",15]],["i64",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[],["disjointsetunion",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[],[["usize",15],["hashset",3,["usize"]],["hashmap",3,["usize","hashset"]]]],[[["usize",15]],[["hashset",3,["usize"]],["usize",15]]],[[]],[[["usize",15]],["bool",15]],[[["usize",15]],["disjointsetunion",3]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15]],["bool",15]],null,[[]],[[]],[[],["disjointsetunionrollback",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[],[["usize",15],["hashset",3,["usize"]],["hashmap",3,["usize","hashset"]]]],[[],["usize",15]],[[["usize",15]],[["hashset",3,["usize"]],["usize",15]]],[[]],[[["usize",15]],["bool",15]],[[["usize",15]],["disjointsetunionrollback",3]],[[["usize",15]],["usize",15]],[[["usize",15]]],[[]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["usize",15]],["bool",15]],null,null,null,null,[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["usize",15],["range",3,["usize"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["fenwicktree",3]],[[]],[[["formatter",3]],["result",6]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["fenwicktree",3]],[[["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["segmenttree",3]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[],["heap",3]],[[],["skewheap",3]],[[]],[[]],[[["heap",3]],["ordering",4]],[[],["skewheap",3]],[[["heap",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,[[["box",3,["heap"]],["option",4,["box"]],["option",4]]],[[["heap",3]],["bool",15]],[[],[["option",4,["box"]],["box",3,["heap"]]]],[[]],[[["heap",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["option",4]],[[]],null,[[]],[[]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[["i64",15]]],[[]],[[]],[[]],[[]],[[],["heap",3]],[[],["skewheap",3]],[[]],[[]],[[["heap",3]],["ordering",4]],null,[[],["skewheap",3]],[[["heap",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,null,[[["option",4,["box"]],["box",3,["heap"]],["option",4]]],[[["heap",3]],["bool",15]],[[["i64",15]],[["box",3,["heap"]],["option",4,["box"]]]],[[]],[[["heap",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["option",4]],[[["i64",15]]],null,[[]],[[]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[["usize",15],["range",3,["usize"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[],["weighteddisjointsetunion",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[],[["usize",15],["hashmap",3,["usize","hashset"]],["hashset",3]]],[[["usize",15]],["i64",15]],[[["usize",15]],[["hashset",3,["usize"]],["usize",15]]],[[]],[[["usize",15]],["bool",15]],[[["usize",15]],["weighteddisjointsetunion",3]],[[["usize",15]]],[[["usize",15]],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15],["i64",15]],["bool",15]]],"p":[[3,"ConvexHullTrick"],[3,"LinearFunction"],[3,"Sieve"],[3,"Eratosthenes"],[3,"Node"],[3,"Node"],[4,"Vertex"],[3,"HeavyLightDecomposition"],[3,"LowestCommonAncestor"],[3,"LowestCommonAncestor"],[3,"Edge"],[8,"Edge"],[3,"UnWeightedEdge"],[3,"WeightedEdge"],[3,"Node"],[3,"BinarySearch"],[3,"XorShift"],[3,"BinaryTrie"],[3,"CumSum2D"],[3,"DisjointSetUnion"],[3,"DisjointSetUnionRollback"],[8,"SemiGroup"],[3,"Add"],[3,"DisjointSparseTable"],[8,"Monoid"],[3,"Add"],[3,"FenwickTree"],[8,"Monoid"],[3,"Min"],[3,"Max"],[3,"SegmentTree"],[3,"Heap"],[3,"SkewHeap"],[3,"SkewHeap"],[3,"Heap"],[8,"Band"],[3,"Min"],[3,"SparseTable"],[3,"WeightedDisjointSetUnion"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};